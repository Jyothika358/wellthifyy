import { useState } from 'react'
import { Button } from "/components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "/components/ui/card"
import { Input } from "/components/ui/input"
import { Label } from "/components/ui/label"
import { RadioGroup, RadioGroupItem } from "/components/ui/radio-group"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { ArrowLeft, Edit, Eye, Heart, Star, Trash } from "lucide-react"

const mockMedicalRecords = [
  { id: 1, date: "2023-10-01", type: "Checkup", description: "Annual health checkup" },
  { id: 2, date: "2023-09-15", type: "Prescription", description: "Prescription for medication" },
]

const mockHealthProfile = {
  name: "John Doe",
  age: 30,
  gender: "Male",
  height: "180 cm",
  weight: "75 kg",
}

const mockHealthTips = [
  { id: 1, title: "Stay Hydrated", content: "Drink at least 8 glasses of water a day.", read: false, important: false },
  { id: 2, title: "Exercise Regularly", content: "Try to exercise for at least 30 minutes a day.", read: false, important: false },
]

export default function HealthApp() {
  const [view, setView] = useState<'records' | 'record-detail' | 'profile' | 'tips'>('records')
  const [selectedRecord, setSelectedRecord] = useState<any>(null)
  const [healthProfile, setHealthProfile] = useState(mockHealthProfile)
  const [healthTips, setHealthTips] = useState(mockHealthTips)

  const handleRecordSelect = (record: any) => {
    setSelectedRecord(record)
    setView('record-detail')
  }

  const handleBack = () => {
    setSelectedRecord(null)
    setView('records')
  }

  const handleProfileEdit = () => {
    // Implement profile editing logic here
    console.log("Profile edited:", healthProfile)
  }

  const handleTipInteraction = (tipId: number, action: 'read' | 'important') => {
    setHealthTips((prevTips) =>
      prevTips.map((tip) =>
        tip.id === tipId ? { ...tip, [action]: !tip[action] } : tip
      )
    )
  }

  return (
    <div className="min-h-screen bg-white flex flex-col">
      <header className="bg-primary text-primary-foreground shadow-lg">
        <div className="container mx-auto px-4 py-6 flex justify-between items-center">
          <h1 className="text-2xl font-bold">Health App</h1>
          <nav>
            <ul className="flex space-x-4">
              <li><Button variant="outline" onClick={() => setView('records')}>Medical Records</Button></li>
              <li><Button variant="outline" onClick={() => setView('profile')}>Health Profile</Button></li>
              <li><Button variant="outline" onClick={() => setView('tips')}>Health Tips</Button></li>
            </ul>
          </nav>
        </div>
      </header>

      <main className="flex-grow container mx-auto px-4 py-8">
        {view === 'records' && (
          <div>
            <h2 className="text-3xl font-bold mb-6">Medical Records</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {mockMedicalRecords.map((record) => (
                <Card key={record.id} className="cursor-pointer" onClick={() => handleRecordSelect(record)}>
                  <CardHeader>
                    <CardTitle>{record.type}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-muted-foreground">{record.description}</p>
                  </CardContent>
                  <CardFooter className="flex justify-between items-center">
                    <div className="text-sm text-muted-foreground">
                      {record.date}
                    </div>
                    <Eye className="h-4 w-4" />
                  </CardFooter>
                </Card>
              ))}
            </div>
          </div>
        )}

        {view === 'record-detail' && selectedRecord && (
          <div>
            <Button variant="outline" onClick={handleBack} className="mb-4">
              <ArrowLeft className="mr-2 h-4 w-4" /> Back to all records
            </Button>
            <Card>
              <CardHeader>
                <CardTitle>{selectedRecord.type}</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">{selectedRecord.description}</p>
              </CardContent>
              <CardFooter className="flex justify-between items-center">
                <div className="text-sm text-muted-foreground">
                  {selectedRecord.date}
                </div>
                <div className="flex space-x-2">
                  <Edit className="h-4 w-4" />
                  <Trash className="h-4 w-4" />
                </div>
              </CardFooter>
            </Card>
          </div>
        )}

        {view === 'profile' && (
          <div>
            <h2 className="text-3xl font-bold mb-6">Health Profile</h2>
            <form onSubmit={(e) => { e.preventDefault(); handleProfileEdit() }}>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="name">Name</Label>
                  <Input id="name" value={healthProfile.name} onChange={(e) => setHealthProfile({ ...healthProfile, name: e.target.value })} />
                </div>
                <div>
                  <Label htmlFor="age">Age</Label>
                  <Input id="age" type="number" value={healthProfile.age} onChange={(e) => setHealthProfile({ ...healthProfile, age: parseInt(e.target.value) })} />
                </div>
                <div>
                  <Label htmlFor="gender">Gender</Label>
                  <Select onValueChange={(value) => setHealthProfile({ ...healthProfile, gender: value })} defaultValue={healthProfile.gender}>
                    <SelectTrigger className="w-full">
                      <SelectValue placeholder="Select" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Male">Male</SelectItem>
                      <SelectItem value="Female">Female</SelectItem>
                      <SelectItem value="Other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="height">Height</Label>
                  <Input id="height" value={healthProfile.height} onChange={(e) => setHealthProfile({ ...healthProfile, height: e.target.value })} />
                </div>
                <div>
                  <Label htmlFor="weight">Weight</Label>
                  <Input id="weight" value={healthProfile.weight} onChange={(e) => setHealthProfile({ ...healthProfile, weight: e.target.value })} />
                </div>
              </div>
              <Button type="submit" className="mt-4">Save Profile</Button>
            </form>
          </div>
        )}

        {view === 'tips' && (
          <div>
            <h2 className="text-3xl font-bold mb-6">Health Tips</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {healthTips.map((tip) => (
                <Card key={tip.id}>
                  <CardHeader>
                    <CardTitle>{tip.title}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-muted-foreground">{tip.content}</p>
                  </CardContent>
                  <CardFooter className="flex justify-between items-center">
                    <div className="text-sm text-muted-foreground">
                      {tip.read ? <span className="text-green-500">Read</span> : <span className="text-gray-500">Unread</span>}
                    </div>
                    <div className="flex space-x-2">
                      <Button variant="outline" size="icon" onClick={() => handleTipInteraction(tip.id, 'read')}>
                        {tip.read ? <Eye className="h-4 w-4 text-green-500" /> : <Eye className="h-4 w-4" />}
                      </Button>
                      <Button variant="outline" size="icon" onClick={() => handleTipInteraction(tip.id, 'important')}>
                        {tip.important ? <Star className="h-4 w-4 text-yellow-500" /> : <Star className="h-4 w-4" />}
                      </Button>
                    </div>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </div>
        )}
      </main>

      <footer className="bg-muted mt-8">
        <div className="container mx-auto px-4 py-6 text-center">
          <p>&copy; 2023 Health App. All rights reserved.</p>
        </div>
      </footer>
    </div>
  )
}
